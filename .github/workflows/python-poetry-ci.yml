name: Python Poetry CI

on:
  workflow_call:
    inputs:
      cov:
        required: false
        type: string
        default: "."
      runs-on:
        required: false
        type: string
        default: '["ubuntu-latest", "windows-latest"]'
      version:
        required: false
        type: string
        default: '["3.10", "3.11", "3.12"]'

permissions:
  contents: read

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ${{ fromJson(inputs.runs-on) }}
        python-version: ${{ fromJson(inputs.version) }}

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
        shell: bash
      - name: Install project
        run: poetry install --no-interaction
        shell: bash
      # - name: Run Black
      #   run: poetry run black .
      #   shell: bash
      - name: Run Tests
        run: poetry run pytest --cov="${{ inputs.cov }}"
        shell: bash
      # - name: Upload Coverage
      #   uses: codecov/codecov-action@v2.1.0
      #   with:
      #     token: ${{ secrets.CODECOV_TOKEN }}
